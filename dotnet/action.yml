name: 'Build .NET Core app'
inputs:
  work-dir:
    description: "Path to the solution/project file"
    required: false
    type: string
    default: "."
  dotnet-version:
    description: "Version of .NET Core SDK to use"
    required: false
    type: string
    default: "8.x"
  run-tests:
    description: "Run tests"
    required: false
    type: boolean
    default: false
  nuget-api-key:
    description: "Nuget Api Key"
    required: false
    type: string

branding:
  icon: 'check'
  color: 'green'

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check for .NET Version Env Var
      id: check_dotnet
      shell: bash
      run: |
        if [ -z "${{ env.DOTNET_VERSION }}" ]; then
          echo "DOTNET_VERSION not set."
          echo "setup_required=true" >> $GITHUB_ENV
        else
          echo "DOTNET_VERSION is set to $DOTNET_VERSION."
          echo "setup_required=false" >> $GITHUB_ENV
        fi

    - name: Setup .NET ${{ inputs.dotnet-version }}
      if: env.setup_required == 'true'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '${{ inputs.dotnet-version }}'

    - name: Set DOTNET_VERSION if not set
      if: env.setup_required == 'true'
      shell: bash
      run: echo "DOTNET_VERSION=${{ inputs.dotnet-version }}" >> $GITHUB_ENV

    - name: Install dependencies
      shell: bash
      working-directory: ${{ inputs.work-dir }}
      run: dotnet restore

    - name: Build
      shell: bash
      working-directory: ${{ inputs.work-dir }}
      run: dotnet build --configuration Release --no-restore

    - name: Test
      if: ${{ inputs.run-tests == 'true' }}
      shell: bash
      working-directory: ${{ inputs.work-dir }}
      run: dotnet test --no-restore --verbosity normal

    - name: Publish Nuget Required
      id: publish-nuget
      shell: bash
      run: |
        if [ -z "${{ inputs.nuget-api-key }}" ]; then
          echo "configured=false" >> $GITHUB_OUTPUT
        else
          echo "configured=true" >> $GITHUB_OUTPUT
        fi

    - name: Get Release Notes
      if: ${{ steps.publish-nuget.outputs.configured == 'true' }}
      uses: actions/github-script@v6
      id: release-notes
      env:
        tag_name: ${{ github.event.release.tag_name }}
        repo_name: ${{ github.event.repository.name }}
        repo_owner: ${{ github.repository_owner }}
      with:
        retries: 3
        script: |
          console.log("Owner:"+process.env.repo_owner);
          console.log("Repo:"+process.env.repo_name);
          var result = await github.rest.repos.getReleaseByTag({
            tag: process.env.tag_name,
            owner: process.env.repo_owner,
            repo: process.env.repo_name
          });
          return result.data.body;


    - name: Publish to Nuget
      if: ${{ steps.publish-nuget.outputs.configured == 'true' }}
      shell: bash
      working-directory: ${{ inputs.work-dir }}
      run: |
        printf "%s" "${{ steps.release-notes.outputs.result }}" > release-notes.txt
        dotnet pack -c Release /p:Version=${{ github.event.release.tag_name }} /p:ReleaseNotesFile=release-notes.txt /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg /p:ContinuousIntegrationBuild=true /p:EmbedUntrackedSources=true /p:PublishRepositoryUrl=true

    - name: Publish Nuget Package
      if: ${{ steps.publish-nuget.outputs.configured == 'true' }}
      shell: bash
      working-directory: ${{ inputs.work-dir }}
      run: dotnet nuget push **/*.nupkg --api-key ${{ inputs.nuget-api-key }} --source https://api.nuget.org/v3/index.json
